[build-system]
requires = ["setuptools>=69", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "evaluations"
version = "0.1.0"
description = "Comprehensive LLM evaluation service with support for multiple benchmarks and datasets"
readme = "README.md"
license = {file = "../../LICENSE"}
authors = [
    {name = "Turing Agents Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.9"
dependencies = [
    # Core ML libraries
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    "tokenizers>=0.14.0",
    "accelerate>=0.24.0",
    
    # Evaluation frameworks
    "evaluate>=0.4.0",
    "lm-eval-harness>=0.4.0",
    "openai-evals>=0.3.0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    
    # Configuration and utilities
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "click>=8.1.0",
    "tqdm>=4.65.0",
    "rich>=13.0.0",
    
    # Reporting and visualization
    "jinja2>=3.1.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    
    # Code evaluation
    "human-eval>=1.0.0",
    
    # Safety and alignment
    "anthropic>=0.7.0",
    
    # Optional multimodal support
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
    
    # Async and parallel processing
    "asyncio>=3.4.3",
    "concurrent-futures>=3.1.1",
    
    # Logging and monitoring
    "structlog>=23.1.0",
    "wandb>=0.15.0",
    "tensorboard>=2.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
    "flash-attn>=2.3.0",
    "bitsandbytes>=0.41.0",
]
multimodal = [
    "torchvision>=0.15.0",
    "timm>=0.9.0",
    "clip-by-openai>=1.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/turing-agents-monorepo"
Repository = "https://github.com/your-org/turing-agents-monorepo"
Documentation = "https://github.com/your-org/turing-agents-monorepo/tree/main/services/evaluations/docs"
"Bug Tracker" = "https://github.com/your-org/turing-agents-monorepo/issues"

[project.scripts]
evaluations = "evaluations.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
evaluations = [
    "configs/*.yaml",
    "reporting/templates/*.html",
    "reporting/templates/*.css",
    "reporting/templates/*.js",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["evaluations"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "datasets.*",
    "transformers.*",
    "torch.*",
    "evaluate.*",
    "lm_eval.*",
    "human_eval.*",
    "anthropic.*",
    "wandb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=evaluations",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access",
]

[tool.coverage.run]
source = ["src/evaluations"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]